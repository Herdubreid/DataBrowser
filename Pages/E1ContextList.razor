@inherits E1BaseComponent
@inject E1Service E1Service

<div class="card mt-2">
    <div class="card-body">
        <div class="pr-3 pb-2">
            <h5>AIS Servers</h5>
            <div class="btn-group-vertical" style="position:absolute; top:0px; right:0px">
                <button type="button" class="btn btn-outline-primary btn-sm" @onclick="@(() => PopupAdd = true)"><i class="fa fa-plus"></i></button>
                <button type="button" class="btn btn-outline-success btn-sm" @onclick="@Refresh"><i class="@RefreshClass"></i></button>
            </div>
        </div>
        <div class="list-group list-group-flush m-2">
            @foreach (var ct in State.E1Contexts)
            {
                <button type="button"
                        class="@($"list-group-item list-group-item-action {(ct.AuthResponse != null && (ct.Name.CompareTo(State.E1Context.Name) == 0) ? "bg-success text-white" : "")}")"
                        @onclick="@(() => SelectContext(ct))">
                    @ct.Name
                </button>
            }
        </div>
    </div>
</div>
@if (PopupAdd)
{
    <DxPopup HeaderText="AIS Server Context">
        <ChildContent>
            <form spellcheck="false" @onsubmit="@AddContext">
                <div class="form-group-row">
                    <label for="name">Name</label>
                    <input type="text" disabled="@AddBusy" id="name" required class="form-control" @bind="@Name" />
                </div>
                <div class="form-group-row">
                    <label for="baseUrl">Base URL</label>
                    <input type="url" disabled="@AddBusy" id="baseUrl" required class="form-control" @bind="@BaseUrl" />
                </div>
                <div class="row">
                    <label class="col text-danger">@Error</label>
                </div>
                <div class="row m-2">
                    <div class="col"></div>
                    <div class="col">
                        <button type="submit" disabled="@AddBusy" class="btn btn-primary"><i class="@OkClass"></i></button>
                    </div>
                    <div class="col">
                        <button type="button" disabled="@AddBusy" class="btn btn-warning" @onclick="@(() => PopupAdd = false)"><i class="fa fa-times"></i></button>
                    </div>
                    <div class="col"></div>
                </div>
            </form>
        </ChildContent>
    </DxPopup>
}
@if (PopupLogin)
{
    <DxPopup HeaderText="@($"Login to {State.E1Context.Name}")">
        <ChildContent>
            <div class="ml-4 mr-4">
                <form spellcheck="false" @onsubmit="@Login">
                    <div class="form-group-row">
                        <label for="user">User</label>
                        <input type="text" disabled="@LoginBusy" id="user" required class="form-control" @bind="@User" />
                    </div>
                    <div class="form-group-row">
                        <label for="password">Password</label>
                        <input type="password" disabled="@LoginBusy" id="password" required class="form-control" @bind="@Password" />
                    </div>
                    <div class="row">
                        <label class="col text-danger">@Error</label>
                    </div>
                    <div class="row m-2">
                        <div class="col"></div>
                        <div class="col">
                            <button type="submit" disabled="@LoginBusy" class="btn btn-primary"><i class="@OkClass"></i></button>
                        </div>
                        <div class="col">
                            <button type="button" disabled="@LoginBusy" class="btn btn-warning" @onclick="@(() => PopupLogin = false)"><i class="fa fa-times"></i></button>
                        </div>
                    </div>
                </form>
            </div>
        </ChildContent>
    </DxPopup>
}

@code {
    bool Busy { get; set; }
    bool AddBusy { get; set; }
    bool LoginBusy { get; set; }
    string Name { get; set; }
    string BaseUrl { get; set; }
    string User { get; set; }
    string Password { get; set; }
    string Error { get; set; }
    string RefreshClass => $"{(@Busy ? "fas fa-sync fa-spin" : "fas fa-sync")}";
    string OkClass => $"{(@AddBusy || @LoginBusy ? "spinner-grow spinner-grow-sm" : "fa fa-check")}";
    E1Context E1Context => State.E1Context;
    bool popupAdd = false;
    bool PopupAdd
    {
        get => popupAdd;
        set
        {
            Name = string.Empty;
            BaseUrl = string.Empty;
            Error = string.Empty;
            popupAdd = value;
            InvokeAsync(StateHasChanged);
        }
    }
    bool popupLogin = false;
    bool PopupLogin
    {
        get => popupLogin;
        set
        {
            User = E1Context.User;
            Password = string.Empty;
            Error = string.Empty;
            popupLogin = value;
            InvokeAsync(StateHasChanged);
        }
    }
    async Task SelectContext(E1Context e1Context)
    {
        await Mediator.Send(new AppState.SetE1ContextAction { Name = e1Context.Name });
        if (!State.Authenticated) PopupLogin = true;
    }
    async Task Login()
    {
        LoginBusy = true;
        E1Service.BaseUrl = E1Context.BaseUrl;
        try
        {
            E1Context.User = User;
            E1Context.AuthResponse = await E1Service.Login(User, Password);
            await Mediator.Send(new AppState.LoginAction { E1Context = E1Context });
            PopupLogin = false;
        }
        catch (Celin.AIS.HttpWebException e)
        {
            Error = e.ErrorResponse.message;
        }
        catch (Exception e)
        {
            Error = e.Message;
        }
        LoginBusy = false;
    }
    async Task AddContext()
    {
        if (State.E1Contexts.Exists(ct => ct.Name.CompareTo(Name) == 0))
        {
            Error = string.Format("Context '{0}' already exists!", Name);
        }
        else
        {
            AddBusy = true;
            E1Service.BaseUrl = BaseUrl;
            try
            {
                await E1Service.DefaultConfiguration();
                await Mediator.Send(new AppState.AddE1ContextAction { Name = Name, BaseUrl = BaseUrl });
                PopupAdd = false;
            }
            catch (Exception e)
            {
                Error = e.Message;
            }
            AddBusy = false;
        }
    }
    async Task Refresh()
    {
        Busy = true;
        await Mediator.Send(new AppState.RefreshCloudStorageAction { StorageType = StorageType.Contexts });
        Busy = false;
    }
    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }
}
